David Morris
Computer Security -- Programming Assignment 3

I chose an attack string based on the resources in class. From the lectures and slides, specifically the slides on Buffer Overflow, I came to the conclusion to create a string of so-called "garbage" characters to fill up the input buffer, that will overflow the buffer that is written into, and will have the address following. For my issue, I knew that I needed to replace the return register of the program at time of buffer input with my own address, so starting from the given buffer size of 100 I started cranking out larger and larger input strings. I eventually got to a buffer size of 113 where I could see a single character from my Input was being written into the return pointer. Because of this, I decided to fill up places 0 -> 112 with garbage characters and place my target address right after. As the 32-bit machine I was working with was little-endian, I needed to reverse the specific address 0x08048e7f to four chunks of 7f 8e 04 08, and when that was input to the program it yielded the desired results. To change this for the demonstration, I will modify the source code of my attackString.c file to change the hard-coded target address only. Specifically, the lines of the format "outLine[i++] = <BYTE_HERE>;".